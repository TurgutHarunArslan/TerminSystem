// Code generated by ent, DO NOT EDIT.

package appointment

import (
	"TerminSystem/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Appointment {
	return predicate.Appointment(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Appointment {
	return predicate.Appointment(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Appointment {
	return predicate.Appointment(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Appointment {
	return predicate.Appointment(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Appointment {
	return predicate.Appointment(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Appointment {
	return predicate.Appointment(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Appointment {
	return predicate.Appointment(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldName, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldEmail, v))
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldPhone, v))
}

// Delkey applies equality check predicate on the "delkey" field. It's identical to DelkeyEQ.
func Delkey(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldDelkey, v))
}

// StartTime applies equality check predicate on the "start_time" field. It's identical to StartTimeEQ.
func StartTime(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldStartTime, v))
}

// EndTime applies equality check predicate on the "end_time" field. It's identical to EndTimeEQ.
func EndTime(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldEndTime, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldDescription, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Appointment {
	return predicate.Appointment(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Appointment {
	return predicate.Appointment(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldContainsFold(FieldName, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.Appointment {
	return predicate.Appointment(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.Appointment {
	return predicate.Appointment(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldContainsFold(FieldEmail, v))
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldPhone, v))
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldNEQ(FieldPhone, v))
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...string) predicate.Appointment {
	return predicate.Appointment(sql.FieldIn(FieldPhone, vs...))
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...string) predicate.Appointment {
	return predicate.Appointment(sql.FieldNotIn(FieldPhone, vs...))
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldGT(FieldPhone, v))
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldGTE(FieldPhone, v))
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldLT(FieldPhone, v))
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldLTE(FieldPhone, v))
}

// PhoneContains applies the Contains predicate on the "phone" field.
func PhoneContains(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldContains(FieldPhone, v))
}

// PhoneHasPrefix applies the HasPrefix predicate on the "phone" field.
func PhoneHasPrefix(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldHasPrefix(FieldPhone, v))
}

// PhoneHasSuffix applies the HasSuffix predicate on the "phone" field.
func PhoneHasSuffix(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldHasSuffix(FieldPhone, v))
}

// PhoneEqualFold applies the EqualFold predicate on the "phone" field.
func PhoneEqualFold(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldEqualFold(FieldPhone, v))
}

// PhoneContainsFold applies the ContainsFold predicate on the "phone" field.
func PhoneContainsFold(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldContainsFold(FieldPhone, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.Appointment {
	return predicate.Appointment(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.Appointment {
	return predicate.Appointment(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.Appointment {
	return predicate.Appointment(sql.FieldNotIn(FieldType, vs...))
}

// DelkeyEQ applies the EQ predicate on the "delkey" field.
func DelkeyEQ(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldDelkey, v))
}

// DelkeyNEQ applies the NEQ predicate on the "delkey" field.
func DelkeyNEQ(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldNEQ(FieldDelkey, v))
}

// DelkeyIn applies the In predicate on the "delkey" field.
func DelkeyIn(vs ...string) predicate.Appointment {
	return predicate.Appointment(sql.FieldIn(FieldDelkey, vs...))
}

// DelkeyNotIn applies the NotIn predicate on the "delkey" field.
func DelkeyNotIn(vs ...string) predicate.Appointment {
	return predicate.Appointment(sql.FieldNotIn(FieldDelkey, vs...))
}

// DelkeyGT applies the GT predicate on the "delkey" field.
func DelkeyGT(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldGT(FieldDelkey, v))
}

// DelkeyGTE applies the GTE predicate on the "delkey" field.
func DelkeyGTE(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldGTE(FieldDelkey, v))
}

// DelkeyLT applies the LT predicate on the "delkey" field.
func DelkeyLT(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldLT(FieldDelkey, v))
}

// DelkeyLTE applies the LTE predicate on the "delkey" field.
func DelkeyLTE(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldLTE(FieldDelkey, v))
}

// DelkeyContains applies the Contains predicate on the "delkey" field.
func DelkeyContains(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldContains(FieldDelkey, v))
}

// DelkeyHasPrefix applies the HasPrefix predicate on the "delkey" field.
func DelkeyHasPrefix(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldHasPrefix(FieldDelkey, v))
}

// DelkeyHasSuffix applies the HasSuffix predicate on the "delkey" field.
func DelkeyHasSuffix(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldHasSuffix(FieldDelkey, v))
}

// DelkeyEqualFold applies the EqualFold predicate on the "delkey" field.
func DelkeyEqualFold(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldEqualFold(FieldDelkey, v))
}

// DelkeyContainsFold applies the ContainsFold predicate on the "delkey" field.
func DelkeyContainsFold(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldContainsFold(FieldDelkey, v))
}

// StartTimeEQ applies the EQ predicate on the "start_time" field.
func StartTimeEQ(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldStartTime, v))
}

// StartTimeNEQ applies the NEQ predicate on the "start_time" field.
func StartTimeNEQ(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldNEQ(FieldStartTime, v))
}

// StartTimeIn applies the In predicate on the "start_time" field.
func StartTimeIn(vs ...time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldIn(FieldStartTime, vs...))
}

// StartTimeNotIn applies the NotIn predicate on the "start_time" field.
func StartTimeNotIn(vs ...time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldNotIn(FieldStartTime, vs...))
}

// StartTimeGT applies the GT predicate on the "start_time" field.
func StartTimeGT(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldGT(FieldStartTime, v))
}

// StartTimeGTE applies the GTE predicate on the "start_time" field.
func StartTimeGTE(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldGTE(FieldStartTime, v))
}

// StartTimeLT applies the LT predicate on the "start_time" field.
func StartTimeLT(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldLT(FieldStartTime, v))
}

// StartTimeLTE applies the LTE predicate on the "start_time" field.
func StartTimeLTE(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldLTE(FieldStartTime, v))
}

// EndTimeEQ applies the EQ predicate on the "end_time" field.
func EndTimeEQ(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldEndTime, v))
}

// EndTimeNEQ applies the NEQ predicate on the "end_time" field.
func EndTimeNEQ(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldNEQ(FieldEndTime, v))
}

// EndTimeIn applies the In predicate on the "end_time" field.
func EndTimeIn(vs ...time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldIn(FieldEndTime, vs...))
}

// EndTimeNotIn applies the NotIn predicate on the "end_time" field.
func EndTimeNotIn(vs ...time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldNotIn(FieldEndTime, vs...))
}

// EndTimeGT applies the GT predicate on the "end_time" field.
func EndTimeGT(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldGT(FieldEndTime, v))
}

// EndTimeGTE applies the GTE predicate on the "end_time" field.
func EndTimeGTE(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldGTE(FieldEndTime, v))
}

// EndTimeLT applies the LT predicate on the "end_time" field.
func EndTimeLT(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldLT(FieldEndTime, v))
}

// EndTimeLTE applies the LTE predicate on the "end_time" field.
func EndTimeLTE(v time.Time) predicate.Appointment {
	return predicate.Appointment(sql.FieldLTE(FieldEndTime, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Appointment {
	return predicate.Appointment(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Appointment {
	return predicate.Appointment(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Appointment {
	return predicate.Appointment(sql.FieldContainsFold(FieldDescription, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Appointment) predicate.Appointment {
	return predicate.Appointment(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Appointment) predicate.Appointment {
	return predicate.Appointment(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Appointment) predicate.Appointment {
	return predicate.Appointment(sql.NotPredicates(p))
}
