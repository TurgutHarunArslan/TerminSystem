// Code generated by ent, DO NOT EDIT.

package ent

import (
	"TerminSystem/ent/appointment"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AppointmentCreate is the builder for creating a Appointment entity.
type AppointmentCreate struct {
	config
	mutation *AppointmentMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (ac *AppointmentCreate) SetName(s string) *AppointmentCreate {
	ac.mutation.SetName(s)
	return ac
}

// SetEmail sets the "email" field.
func (ac *AppointmentCreate) SetEmail(s string) *AppointmentCreate {
	ac.mutation.SetEmail(s)
	return ac
}

// SetPhone sets the "phone" field.
func (ac *AppointmentCreate) SetPhone(s string) *AppointmentCreate {
	ac.mutation.SetPhone(s)
	return ac
}

// SetType sets the "type" field.
func (ac *AppointmentCreate) SetType(a appointment.Type) *AppointmentCreate {
	ac.mutation.SetType(a)
	return ac
}

// SetDelkey sets the "delkey" field.
func (ac *AppointmentCreate) SetDelkey(s string) *AppointmentCreate {
	ac.mutation.SetDelkey(s)
	return ac
}

// SetStartTime sets the "start_time" field.
func (ac *AppointmentCreate) SetStartTime(t time.Time) *AppointmentCreate {
	ac.mutation.SetStartTime(t)
	return ac
}

// SetEndTime sets the "end_time" field.
func (ac *AppointmentCreate) SetEndTime(t time.Time) *AppointmentCreate {
	ac.mutation.SetEndTime(t)
	return ac
}

// SetDescription sets the "description" field.
func (ac *AppointmentCreate) SetDescription(s string) *AppointmentCreate {
	ac.mutation.SetDescription(s)
	return ac
}

// Mutation returns the AppointmentMutation object of the builder.
func (ac *AppointmentCreate) Mutation() *AppointmentMutation {
	return ac.mutation
}

// Save creates the Appointment in the database.
func (ac *AppointmentCreate) Save(ctx context.Context) (*Appointment, error) {
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AppointmentCreate) SaveX(ctx context.Context) *Appointment {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AppointmentCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AppointmentCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AppointmentCreate) check() error {
	if _, ok := ac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Appointment.name"`)}
	}
	if v, ok := ac.mutation.Name(); ok {
		if err := appointment.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Appointment.name": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "Appointment.email"`)}
	}
	if v, ok := ac.mutation.Email(); ok {
		if err := appointment.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Appointment.email": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New(`ent: missing required field "Appointment.phone"`)}
	}
	if v, ok := ac.mutation.Phone(); ok {
		if err := appointment.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "Appointment.phone": %w`, err)}
		}
	}
	if _, ok := ac.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Appointment.type"`)}
	}
	if v, ok := ac.mutation.GetType(); ok {
		if err := appointment.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Appointment.type": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Delkey(); !ok {
		return &ValidationError{Name: "delkey", err: errors.New(`ent: missing required field "Appointment.delkey"`)}
	}
	if v, ok := ac.mutation.Delkey(); ok {
		if err := appointment.DelkeyValidator(v); err != nil {
			return &ValidationError{Name: "delkey", err: fmt.Errorf(`ent: validator failed for field "Appointment.delkey": %w`, err)}
		}
	}
	if _, ok := ac.mutation.StartTime(); !ok {
		return &ValidationError{Name: "start_time", err: errors.New(`ent: missing required field "Appointment.start_time"`)}
	}
	if _, ok := ac.mutation.EndTime(); !ok {
		return &ValidationError{Name: "end_time", err: errors.New(`ent: missing required field "Appointment.end_time"`)}
	}
	if _, ok := ac.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Appointment.description"`)}
	}
	return nil
}

func (ac *AppointmentCreate) sqlSave(ctx context.Context) (*Appointment, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AppointmentCreate) createSpec() (*Appointment, *sqlgraph.CreateSpec) {
	var (
		_node = &Appointment{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(appointment.Table, sqlgraph.NewFieldSpec(appointment.FieldID, field.TypeInt))
	)
	if value, ok := ac.mutation.Name(); ok {
		_spec.SetField(appointment.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ac.mutation.Email(); ok {
		_spec.SetField(appointment.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := ac.mutation.Phone(); ok {
		_spec.SetField(appointment.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := ac.mutation.GetType(); ok {
		_spec.SetField(appointment.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := ac.mutation.Delkey(); ok {
		_spec.SetField(appointment.FieldDelkey, field.TypeString, value)
		_node.Delkey = value
	}
	if value, ok := ac.mutation.StartTime(); ok {
		_spec.SetField(appointment.FieldStartTime, field.TypeTime, value)
		_node.StartTime = value
	}
	if value, ok := ac.mutation.EndTime(); ok {
		_spec.SetField(appointment.FieldEndTime, field.TypeTime, value)
		_node.EndTime = value
	}
	if value, ok := ac.mutation.Description(); ok {
		_spec.SetField(appointment.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	return _node, _spec
}

// AppointmentCreateBulk is the builder for creating many Appointment entities in bulk.
type AppointmentCreateBulk struct {
	config
	err      error
	builders []*AppointmentCreate
}

// Save creates the Appointment entities in the database.
func (acb *AppointmentCreateBulk) Save(ctx context.Context) ([]*Appointment, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Appointment, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppointmentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AppointmentCreateBulk) SaveX(ctx context.Context) []*Appointment {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AppointmentCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AppointmentCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
