// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.857
package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func AppointmentForm() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<form id=\"appointmentForm\" action=\"/api/termins\" method=\"POST\"><label for=\"name\">Name:</label> <input type=\"text\" id=\"name\" name=\"name\" required> <label for=\"email\">Email:</label> <input type=\"text\" id=\"email\" name=\"email\" required> <label for=\"phone\">Nummer:</label> <input type=\"tel\" id=\"phone\" name=\"phone\" pattern=\"(\\+49\\s?|0)[1-9][0-9\\s\\-]{3,14}\" placeholder=\"+49 30 1234 5678\" required> <label for=\"desc\">Nach:</label> <input type=\"text\" id=\"desc\" name=\"desc\" required> <label for=\"datepicker\">Datumm:</label> <input type=\"text\" id=\"datepicker\" name=\"datepicker\" required><div id=\"timeSlotContainer\" style=\"display:block;\"><label for=\"time\">Choose a time:</label> <select name=\"date\" id=\"date\" required></select></div><button type=\"submit\" id=\"submitBtn\" style=\"display:none;\">Submit</button></form><script src=\"https://cdn.jsdelivr.net/npm/flatpickr\"></script><script>\nflatpickr(\"#datepicker\", {\n    minDate: \"today\",\n    disable: [date => date.getDay() === 0],\n    onReady: function(selectedDates, dateStr, instance) {\n        const today = new Date();\n        const currentTime = today.getHours() * 60 + today.getMinutes();\n        if (today.getDay() === 6 && currentTime >= (13 * 60 + 30)) {\n            today.setDate(today.getDate() + 1);\n            instance.set(\"minDate\", today);\n        } else if (today.getDay() >= 1 && today.getDay() <= 5 && currentTime >= (16 * 60 + 30)) {\n            today.setDate(today.getDate() + 1);\n            instance.set(\"minDate\", today);\n        }\n    },\n    onChange: function(selectedDates, dateStr, instance) {\n        document.getElementById(\"timeSlotContainer\").style.display = \"block\";\n        document.getElementById(\"submitBtn\").style.display = \"inline\";\n\n        const timeSelect = document.getElementById(\"date\");\n        timeSelect.innerHTML = \"\";\n        timeSelect.selectedIndex = -1;\n\n        fetch(\"/api/termins?date=\" + dateStr)\n            .then(response => response.json())\n            .then(data => {\n                if (data.error != null) {\n                    document.getElementById(\"submitBtn\").style.display = \"none\";\n                    return;\n                }\n                data.data.forEach(time => {\n                    const option = document.createElement(\"option\");\n                    option.value = String(time).replace(\"\");\n                    option.textContent = String(time).split(\" \").pop();\n                    timeSelect.appendChild(option);\n                });\n            })\n            .catch(error => console.error(\"Error fetching available times:\", error));\n    }\n});\n    </script><style>\n#appointmentForm {\n    max-width: 450px;\n    margin: 30px auto;\n    padding: 25px;\n    background-color: #ffffff;\n    border-radius: 12px;\n    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n    border: 1px solid #eaeaea;\n    text-align: center; /* Center all content */\n}\n\nlabel {\n    font-weight: 600;\n    display: block;\n    margin-top: 20px;\n    color: #444;\n    font-size: 1rem;\n}\n\ninput, select {\n    width: 80%;\n    padding: 12px;\n    margin: 8px auto;\n    border: 2px solid #ddd;\n    border-radius: 8px;\n    font-size: 1rem;\n    transition: border-color 0.2s ease-in-out, box-shadow 0.2s ease-in-out;\n    display: block;\n    text-align: left;\n}\n\ninput:focus, select:focus {\n    outline: none;\n    border-color: #007bff;\n    box-shadow: 0 0 8px rgba(0, 123, 255, 0.3);\n}\n\n#date2 {\n    background-color: #fdfdfd;\n    cursor: pointer;\n}\n\n#submitBtn {\n    width: 80%;\n    padding: 12px;\n    background-color: #007bff;\n    color: white;\n    border: none;\n    border-radius: 8px;\n    cursor: pointer;\n    font-size: 1.1rem;\n    margin-top: 20px;\n    transition: background-color 0.3s ease, transform 0.2s ease;\n    font-weight: 600;\n    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.1);\n    display: inline-block; /* Ensure it's centered */\n}\n\n#submitBtn:hover {\n    background-color: #0056b3;\n    transform: translateY(-2px); /* Subtle lift effect */\n}\n\n#submitBtn:active {\n    background-color: #004494;\n    transform: translateY(0); /* Slight compression on click */\n}\n\n#timeSlotContainer {\n    margin-top: 20px;\n}\n\n#time {\n    padding: 12px;\n    border-radius: 8px;\n    background-color: #f8f9fa;\n    border: 2px solid #ddd;\n    font-size: 1rem;\n    transition: border-color 0.2s ease-in-out;\n    width: 80%;\n    margin: 8px auto;\n    text-align: left;\n}\n\n#time:focus {\n    border-color: #007bff;\n}\n\ninput::placeholder {\n    color: #bbb;\n    font-style: italic;\n}\n\n    </style>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
