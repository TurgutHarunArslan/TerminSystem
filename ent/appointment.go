// Code generated by ent, DO NOT EDIT.

package ent

import (
	"TerminSystem/ent/appointment"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Appointment is the model entity for the Appointment schema.
type Appointment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone,omitempty"`
	// Type holds the value of the "type" field.
	Type appointment.Type `json:"type,omitempty"`
	// Delkey holds the value of the "delkey" field.
	Delkey string `json:"delkey,omitempty"`
	// StartTime holds the value of the "start_time" field.
	StartTime time.Time `json:"start_time,omitempty"`
	// EndTime holds the value of the "end_time" field.
	EndTime time.Time `json:"end_time,omitempty"`
	// Description holds the value of the "description" field.
	Description  string `json:"description,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Appointment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case appointment.FieldID:
			values[i] = new(sql.NullInt64)
		case appointment.FieldName, appointment.FieldEmail, appointment.FieldPhone, appointment.FieldType, appointment.FieldDelkey, appointment.FieldDescription:
			values[i] = new(sql.NullString)
		case appointment.FieldStartTime, appointment.FieldEndTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Appointment fields.
func (a *Appointment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case appointment.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case appointment.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				a.Name = value.String
			}
		case appointment.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				a.Email = value.String
			}
		case appointment.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				a.Phone = value.String
			}
		case appointment.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				a.Type = appointment.Type(value.String)
			}
		case appointment.FieldDelkey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field delkey", values[i])
			} else if value.Valid {
				a.Delkey = value.String
			}
		case appointment.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_time", values[i])
			} else if value.Valid {
				a.StartTime = value.Time
			}
		case appointment.FieldEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_time", values[i])
			} else if value.Valid {
				a.EndTime = value.Time
			}
		case appointment.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				a.Description = value.String
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Appointment.
// This includes values selected through modifiers, order, etc.
func (a *Appointment) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// Update returns a builder for updating this Appointment.
// Note that you need to call Appointment.Unwrap() before calling this method if this Appointment
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Appointment) Update() *AppointmentUpdateOne {
	return NewAppointmentClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Appointment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Appointment) Unwrap() *Appointment {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Appointment is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Appointment) String() string {
	var builder strings.Builder
	builder.WriteString("Appointment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("name=")
	builder.WriteString(a.Name)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(a.Email)
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(a.Phone)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", a.Type))
	builder.WriteString(", ")
	builder.WriteString("delkey=")
	builder.WriteString(a.Delkey)
	builder.WriteString(", ")
	builder.WriteString("start_time=")
	builder.WriteString(a.StartTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_time=")
	builder.WriteString(a.EndTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(a.Description)
	builder.WriteByte(')')
	return builder.String()
}

// Appointments is a parsable slice of Appointment.
type Appointments []*Appointment
